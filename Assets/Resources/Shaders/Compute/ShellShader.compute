#pragma kernel CSMain
 
 #define threadX 8
 #define threadY 8
 #define threadZ 8

 #define strideX 8
 #define strideY 8
 #define strideZ 8

 #define gridX (threadX * strideX)
 #define gridY (threadY * strideY)
 #define gridZ (threadZ * strideZ)

 
//Shaping Factors;
float _LengthOfConnectionSprings      ;//= 0.0001;
float _ConnectionSpringStrength       ;//= .3;
float _MaxVel                         ;//= 3.5;
float _MaxForce                       ;//= 3.2;
float _ForceMultiplier                ;//= 100.1;

float _Dampening                      ;//= .98;
float _HandRepelRadius                ;//= 1.0;
float _HandRepelStrength              ;//= -.05;

float _ReturnSpringStrength           ;//= 100.1;

float _DistanceToAudioHit             ;//= 2.;
float _AudioHitMultiplier             ;//= .003;

//#define _ConnectionSpringStrength    .3
//#define _MaxVel                      30.5
//#define _MaxForce                    30.2
//#define _ForceMultiplier             .01
//
//#define _Dampening                   .98
//#define _HandRepelRadius             1.0
//#define _HandRepelStrength           .05
//
//#define _ReturnSpringStrength        1.1
//
//#define _DistanceToAudioHit          2.
//#define _AudioHitMultiplier          .003









//low level
float _Time;
float _Delta;

int _NumDisformers;
float  _Drawing;
int _RibbonWidth;
int _RibbonLength;
int _NumberHands;


float radius = .4;

#include "Chunks/VertC4Struct.cginc"
#include "Chunks/PosStruct.cginc"
#include "Chunks/HandStruct.cginc"


#include "Chunks/springForce.cginc"
#include "Chunks/handForce.cginc"


RWStructuredBuffer<VertC4> vertBuffer;
RWStructuredBuffer<Pos> ogBuffer;
RWStructuredBuffer<float3> disformBuffer;
RWStructuredBuffer<float4x4> transBuffer;
RWStructuredBuffer<Hand> handBuffer;

Texture2D<float4> _Audio;





[numthreads(threadX,threadY,threadZ)]
void CSMain (uint3 id : SV_DispatchThreadID) {
  
  int pID = id.x + id.y * gridX + id.z * gridX * gridY;

  VertC4 vert = vertBuffer[pID];
  Pos og = ogBuffer[pID];

  float3 force = float3( 0 , 0 , 0 );
  float4 audio = _Audio[float2(abs(sin(vert.uv.y * 20.)) * 256.,0)];

  //force += audio.xyz* .001;


  //Hand Forces
  for( int i = 0; i < _NumberHands; i++ ){
    Hand  h = handBuffer[i];
    force += h.triggerVal  * _HandRepelStrength * handForce( vert.pos , h.pos , _HandRepelRadius );
  }

  //DisformerForces
  for( int i = 0; i < _NumDisformers; i++ ){

    float3 pos = disformBuffer[i];
    float3 dif = (vert.pos - pos );

    float audio = length( _Audio[ float2((float(i) / _NumDisformers) * 32,0)] );

    if( length( dif ) * _DistanceToAudioHit < audio){
      force += audio * normalize( dif ) * _AudioHitMultiplier;
    }

  }


  //Return Spring Forces
  float3 transformedOG =  mul( transBuffer[0] , float4( og.pos , 1.) ).xyz;
  force +=  _ReturnSpringStrength * springForce( vert.pos , transformedOG  , 0.001 );


  //Connection Spring Forces
  float3 l = vertBuffer[vert.lID].pos;
  float3 r = vertBuffer[vert.rID].pos;
  float3 u = vertBuffer[vert.uID].pos;
  float3 d = vertBuffer[vert.dID].pos;

  float3 connectionForce = float3( 0. , 0. , 0. );

  //float cs =_ConnectionSpringStrength;
  //float ls =_LengthOfConnectionSprings;


  float cs = .1;
  float ls = .01;


  connectionForce += cs * springForce( vert.pos , l , ls );
  connectionForce += cs * springForce( vert.pos , r , ls );
  connectionForce += cs * springForce( vert.pos , u , ls );
  connectionForce += cs * springForce( vert.pos , d , ls );

  force += connectionForce;
  vert.debug = connectionForce;
  //Calculate normal from connections here instead of vert shader
  vert.nor = normalize( cross( (l - r) , (u-d) ));

  // Limit Force;
  if( length( force ) > _MaxForce ){ force = normalize( force )* _MaxForce; }

  vert.vel += force * _ForceMultiplier;

  // Limit Velocity
  if( length( vert.vel ) > _MaxVel ){ vert.vel = normalize( vert.vel )* _MaxVel; }


  vert.vel *= _Dampening;

  vert.pos += vert.vel ;

  Pos p;
  p.pos = vert.pos * .99;

  //vert.pos = transformedOG;

 // vert.debug = float3( vert.row / _RibbonLength ,  vert.col / _RibbonWidth , 0. );
//
 // if( vert.row == 0 ){
 //   vert.debug = float3( 1. , 0 , 0 );
 // }
//
 // if( vert.col == 0 ){
 //   //vert.debug = float3( 0 , 1 , 0 );
 // }
//
 // vert.debug = normalize( vert.pos - vertBuffer[vert.lID].pos ) * .5 + .5;

  if( vert.life < 0 ){
    vert.pos = transformedOG * .999;
    vert.life = 1;
  }
  vertBuffer[pID] = vert;

}